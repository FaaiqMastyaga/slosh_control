# Natural Period Finder
# Simulate sloshing generated by Impulse Force

from pyjet import *
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import random

# --- Simulation Parameters (in mm) ---
ANIM_NUM_FRAMES = 1000  # Increased frames for a longer observation
ANIM_FPS = 60
TIME_INTERVAL = 1.0 / ANIM_FPS
IMPULSE_TIME = 1.0       # Time to apply the initial impulse (in seconds)
IMPULSE_DURATION = 0.05  # Duration of the impulse (in seconds)
IMPULSE_ACCEL = 500.0    # Horizontal acceleration in mm/s^2
g_mm = 9810.0            # Gravity in mm/s^2

# --- Container Parameters (in mm) ---
CONTAINER_WIDTH = 95.0
CONTAINER_HEIGHT = 35.0
FILL_HEIGHT = CONTAINER_HEIGHT / 2
PARTICLE_SPACING = 0.1
RESOLUTION = (100, 100)
CONTAINER_CENTER_X = CONTAINER_WIDTH / 2.0

def main():
    # Mute logging for cleaner output in the terminal
    Logging.mute()

    # Create the APIC solver for 2D fluid simulation.
    solver = ApicSolver2(resolution=RESOLUTION, domainSizeX=CONTAINER_WIDTH)
    
    # Create an initial block of fluid in a box at the bottom.
    box = Box2(lowerCorner=(0.0, 0.0), upperCorner=(CONTAINER_WIDTH, FILL_HEIGHT))
    
    # Use a volume particle emitter to fill the box with particles.
    emitter = VolumeParticleEmitter2(implicitSurface=box, isOneShot=True, spacing=PARTICLE_SPACING)
    solver.particleEmitter = emitter
    
    # Create a box collider for the dam, with a flipped normal to contain the fluid.
    box_collider = Box2(lowerCorner=(0.0, 0.0), upperCorner=(CONTAINER_WIDTH, CONTAINER_HEIGHT))
    box_collider.isNormalFlipped = True
    collider = RigidBodyCollider2(surface=box_collider)
    solver.collider = collider

    # Set initial gravity to zero for a steady state.
    solver.gravity = Vector2D(0.0, 0.0)
    
    # --- Data storage for plotting later ---
    cm_x_positions = []
    times = []
    
    # Set up the plot for real-time visualization.
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_aspect('equal', 'box')
    ax.set_xlim(0, CONTAINER_WIDTH)
    ax.set_ylim(0, CONTAINER_HEIGHT)
    ax.set_xlabel('X-axis (mm)')
    ax.set_ylabel('Y-axis (mm)')
    
    positions = np.array(solver.particleSystemData.positions, copy=False)
    sc = ax.scatter(positions[:, 0], positions[:, 1], s=1, c='blue')
    
    # Add a title with a timer.
    timer_text = ax.text(0.02, 0.95, f"Time: {0.0:.2f}s | Frame: {0}", transform=ax.transAxes)

    # Add an arrow to represent the force, initially hidden.
    force_arrow = ax.arrow(
        CONTAINER_CENTER_X, CONTAINER_HEIGHT * 0.5, 
        0.0, 0.0, head_width=2, head_length=5, fc='red', ec='red'
    )
    
    # --- Animation update function. ---
    def update_frame(frame_index):
        current_time = frame_index * TIME_INTERVAL
        
        # Apply impulse for a short duration
        accel = 0.0
        if IMPULSE_TIME <= current_time < IMPULSE_TIME + IMPULSE_DURATION:
            accel = IMPULSE_ACCEL
            force_arrow.set_visible(True)
            force_arrow.set_data(
                x=CONTAINER_CENTER_X, y=CONTAINER_HEIGHT * 0.5, 
                dx=accel * 0.05, dy=0.0
            )
        else:
            force_arrow.set_visible(False)
        
        # Set gravity vector, including the horizontal impulse
        solver.gravity = Vector2D(accel, -g_mm)
        
        # Run one step of the simulation.
        current_frame = Frame(frame_index, TIME_INTERVAL)
        solver.update(current_frame)
        
        # Get the new particle positions.
        positions = np.array(solver.particleSystemData.positions, copy=False)
        sc.set_offsets(positions)
        
        # --- Store data for period analysis ---
        if positions.size > 0:
            cm_x = positions[:, 0].mean()
            cm_x_positions.append(cm_x)
            times.append(current_time)
        else:
            # Handle case with no particles
            cm_x_positions.append(CONTAINER_CENTER_X)
            times.append(current_time)
        
        # Update the timer and frame counter in the plot title.
        timer_text.set_text(f"Time: {current_frame.timeInSeconds():.2f}s | Frame: {frame_index}")
        
        return sc, timer_text, force_arrow

    # Create and show the animation.
    anim = animation.FuncAnimation(
        fig, update_frame, frames=ANIM_NUM_FRAMES, 
        interval=1000 / ANIM_FPS, blit=True
    )
    plt.show()

    # --- Plot the results after the animation finishes ---
    fig_period, ax_period = plt.subplots(figsize=(10, 6))
    ax_period.plot(times, cm_x_positions)
    ax_period.set_title("Horizontal Position of Fluid Center of Mass Over Time")
    ax_period.set_xlabel("Time (s)")
    ax_period.set_ylabel("Horizontal Position (mm)")
    ax_period.grid(True)
    
    # Add a visual guide line for the container's center
    ax_period.axhline(CONTAINER_CENTER_X, color='r', linestyle='--', label='Container Center')
    
    plt.legend()
    plt.show()

if __name__ == '__main__':
    main()
